// download.component.ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-download',
  templateUrl: './download.component.html'
})
export class DownloadComponent {
  constructor(private http: HttpClient) {}

  // Function to download the file blob from the signed URL
  downloadFile() {
    const signedUrl = 'YOUR_SIGNED_URL_HERE'; // Replace with your signed URL

    this.http.get(signedUrl, { responseType: 'blob' }).subscribe(blob => {
      // Create a link element and set the URL using the blob
      const downloadLink = document.createElement('a');
      const url = window.URL.createObjectURL(blob);
      downloadLink.href = url;

      // Extract the filename from the Content-Disposition header
      const contentDisposition = blob.type; // Placeholder to simulate Content-Disposition header
      const fileName = this.getFileNameFromContentDisposition(contentDisposition) || 'downloaded_file.xls'; // Fallback file name

      downloadLink.download = fileName;
      downloadLink.click();

      // Clean up the URL
      window.URL.revokeObjectURL(url);
    });
  }

  // Function to extract the file name from the Content-Disposition header
  getFileNameFromContentDisposition(contentDisposition: string): string {
    const match = contentDisposition && contentDisposition.match(/filename="?(.+)"?/);
    return match ? match[1] : null;
  }
}
