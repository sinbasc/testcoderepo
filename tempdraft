import json

def generate_policy(principal_id, effect, resource):
    """Generate an IAM policy for API Gateway."""
    return {
        "principalId": principal_id,
        "policyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": "execute-api:Invoke",
                    "Effect": effect,
                    "Resource": resource
                }
            ]
        }
    }

def lambda_handler(event, context):
    # Extract headers from the event (Request payload type)
    headers = event.get("headers", {}) or {}
    cookies = headers.get("Cookie", "")  # e.g., "ms-sso=abc123; other=val"

    # Parse cookies into a dictionary
    cookie_dict = {}
    if cookies:
        for cookie in cookies.split(";"):
            if "=" in cookie:
                key, value = cookie.strip().split("=", 1)
                cookie_dict[key] = value

    # Check if either 'ms-sso' or 'ms-sso2' key exists in cookies
    if "ms-sso" not in cookie_dict and "ms-sso2" not in cookie_dict:
        raise Exception("Unauthorized: Neither ms-sso nor ms-sso2 cookie found")

    # At least one of the keys exists, allow the request to proceed
    return generate_policy("user", "Allow", event["methodArn"])