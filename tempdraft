import json
import boto3

# Initialize AWS Lambda client to invoke Lambda A
lambda_client = boto3.client('lambda')

def lambda_handler(event, context):
    # Extract headers and method from the event
    print("Event received:", event)
    headers = event.get("headers", {}) or {}
    http_method = event.get("httpMethod", "").upper()
    
    # List of allowed origins
    allowed_origins = [
        "https://ratingsdisclosure-admin-ga.dbrsmorningstar.com",
        "https://ratingsdisclosure-admin-qa.dbrsmorningstar.com"
    ]
    
    # Get the request's origin
    request_origin = headers.get("origin", "")
    print("Request Origin:", request_origin)
    print("HTTP Method:", http_method)
    
    # Set CORS headers
    cors_origin = request_origin if request_origin in allowed_origins else allowed_origins[0]
    cors_headers = {
        "Access-Control-Allow-Origin": cors_origin,
        "Access-Control-Allow-Headers": "Origin, Authorization, Cookie, Content-Type",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS"
    }

    # Handle OPTIONS preflight request
    if http_method == "OPTIONS":
        print("Handling OPTIONS request - returning 204")
        return {
            "statusCode": 204,
            "headers": cors_headers,
            "body": ""
        }

    # Check the origin for authorization (non-OPTIONS requests)
    if request_origin not in allowed_origins:
        print("Origin not allowed - redirecting to session manager")
        return {
            "statusCode": 302,
            "headers": {
                "Location": "https://uim-session-manager-awsstg.morningstar.com",
                **cors_headers
            },
            "body": ""
        }

    # Parse cookies
    cookies = headers.get("cookie", "")
    cookie_dict = {}
    if cookies:
        for cookie in cookies.split(";"):
            if "=" in cookie:
                key, value = cookie.strip().split("=", 1)
                cookie_dict[key] = value
        print("Parsed cookies:", cookie_dict)

    # Check for required cookies
    if "ms-sso" not in cookie_dict and "ms-sso2" not in cookie_dict:
        print("Unauthorized: No ms-sso or ms-sso2 cookie - redirecting")
        return {
            "statusCode": 302,
            "headers": {
                "Location": "https://uim-session-manager-awsstg.morningstar.com",
                **cors_headers
            },
            "body": ""
        }

    # If authorized, invoke Lambda A
    try:
        print("Authorized - invoking Lambda A")
        response = lambda_client.invoke(
            FunctionName="intended-lambda-function-name",  # Replace with Lambda A's actual name
            InvocationType="RequestResponse",  # Synchronous invocation
            Payload=json.dumps(event)  # Pass the original event to Lambda A
        )
        # Parse Lambda A's response
        result = json.loads(response["Payload"].read().decode("utf-8"))
        print("Lambda A response:", result)
        # Add CORS headers to Lambda A's response
        result["headers"] = {**result.get("headers", {}), **cors_headers}
        return result
    except Exception as e:
        print("Error invoking Lambda A:", str(e))
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)}),
            "headers": {**cors_headers, "Content-Type": "application/json"}
        }