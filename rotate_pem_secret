import boto3
from botocore.exceptions import ClientError
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes

def generate_key_pair():
    # Generate RSA private key
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )

    # Generate public key
    public_key = private_key.public_key()

    # Serialize private key to PEM format
    private_key_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    # Serialize public key to PEM format
    public_key_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    return private_key_pem, public_key_pem

def upload_to_secrets_manager(secret_name, private_key_pem, public_key_pem, region_name='us-east-1'):
    client = boto3.client('secretsmanager', region_name=region_name)

    secret_string = {
        'private_key': private_key_pem.decode('utf-8'),
        'public_key': public_key_pem.decode('utf-8')
    }

    try:
        response = client.create_secret(
            Name=secret_name,
            SecretString=json.dumps(secret_string),
            Description="RSA key pair for signing CloudFront URLs"
        )
        print("Secret created successfully:", response)
    except ClientError as e:
        # Handle the exception if the secret already exists or other errors occur
        if e.response['Error']['Code'] == 'ResourceExistsException':
            # Update the existing secret
            response = client.update_secret(
                SecretId=secret_name,
                SecretString=json.dumps(secret_string)
            )
            print("Secret updated successfully:", response)
        else:
            print("Error:", e)

if __name__ == '__main__':
    secret_name = 'cloudfront-rsa-key-pair'
    private_key_pem, public_key_pem = generate_key_pair()
    upload_to_secrets_manager(secret_name, private_key_pem, public_key_pem)
