import boto3
import json
from botocore.exceptions import ClientError
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

def generate_key_pair():
    # Generate RSA private key
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )

    # Generate public key
    public_key = private_key.public_key()

    # Serialize private key to PEM format
    private_key_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    # Serialize public key to PEM format
    public_key_pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )

    return private_key_pem, public_key_pem

def upload_private_key_to_secrets_manager(secret_name, private_key_pem, region_name='us-east-1'):
    client = boto3.client('secretsmanager', region_name=region_name)

    secret_string = {
        'private_key': private_key_pem.decode('utf-8')
    }

    try:
        response = client.create_secret(
            Name=secret_name,
            SecretString=json.dumps(secret_string),
            Description="RSA private key for signing CloudFront URLs"
        )
        print("Secret created successfully:", response)
    except ClientError as e:
        # Handle the exception if the secret already exists or other errors occur
        if e.response['Error']['Code'] == 'ResourceExistsException':
            # Update the existing secret
            response = client.update_secret(
                SecretId=secret_name,
                SecretString=json.dumps(secret_string)
            )
            print("Secret updated successfully:", response)
        else:
            print("Error:", e)

def add_public_key_to_cloudfront(public_key_pem, public_key_name, region_name='us-east-1'):
    client = boto3.client('cloudfront', region_name=region_name)

    try:
        response = client.create_public_key(
            PublicKeyConfig={
                'CallerReference': public_key_name,
                'Name': public_key_name,
                'EncodedKey': public_key_pem.decode('utf-8'),
                'Comment': 'Public key for signing CloudFront URLs'
            }
        )
        print("Public key added successfully:", response)
    except ClientError as e:
        print("Error:", e)

if __name__ == '__main__':
    secret_name = 'cloudfront-rsa-private-key'
    public_key_name = 'cloudfront-public-key'

    # Generate key pair
    private_key_pem, public_key_pem = generate_key_pair()

    # Upload private key to Secrets Manager
    upload_private_key_to_secrets_manager(secret_name, private_key_pem)

    # Add public key to CloudFront
    add_public_key_to_cloudfront(public_key_pem, public_key_name)


import boto3

def get_key_pair_id_by_public_key_name(public_key_name, region_name='us-east-1'):
    client = boto3.client('cloudfront', region_name=region_name)

    try:
        # List all public keys
        response = client.list_public_keys()
        public_keys = response['PublicKeyList']['Items']

        # Find the public key by name
        for key in public_keys:
            if key['PublicKeyConfig']['Name'] == public_key_name:
                return key['Id']

        return None
    except Exception as e:
        print(f"Error: {e}")
        return None

if __name__ == '__main__':
    public_key_name = 'cloudfront-public-key'
    key_pair_id = get_key_pair_id_by_public_key_name(public_key_name)

    if key_pair_id:
        print(f"Key Pair ID for '{public_key_name}': {key_pair_id}")
    else:
        print(f"Public key '{public_key_name}' not found")

import boto3
import json
import base64
from datetime import datetime, timedelta
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

def get_private_key_from_secrets_manager(secret_name, region_name='us-east-1'):
    client = boto3.client('secretsmanager', region_name=region_name)
    
    try:
        response = client.get_secret_value(SecretId=secret_name)
        secret_string = response['SecretString']
        secret = json.loads(secret_string)
        private_key_pem = secret['private_key']
        return private_key_pem
    except Exception as e:
        print(f"Error retrieving secret: {e}")
        return None

def generate_signed_url(domain_name, private_key_pem, key_pair_id, url_path, expire_minutes=60):
    private_key = serialization.load_pem_private_key(
        private_key_pem.encode('utf-8'),
        password=None
    )
    
    # Define the expiration time
    expire_time = int((datetime.utcnow() + timedelta(minutes=expire_minutes)).timestamp())
    
    # Policy for URL signing
    policy = {
        "Statement": [{
            "Resource": f"{domain_name}{url_path}",
            "Condition": {
                "DateLessThan": {"AWS:EpochTime": expire_time}
            }
        }]
    }
    policy_json = json.dumps(policy)
    policy_encoded = base64.urlsafe_b64encode(policy_json.encode('utf-8')).decode('utf-8')
    
    # Sign the policy with the private key
    signature = private_key.sign(
        policy_encoded.encode('utf-8'),
        padding.PKCS1v15(),
        hashes.SHA1()
    )
    signature_encoded = base64.urlsafe_b64encode(signature).decode('utf-8')
    
    # Create the signed URL
    signed_url = (f"{domain_name}{url_path}?Expires={expire_time}&Key-Pair-Id={key_pair_id}"
                  f"&Signature={signature_encoded}&Policy={policy_encoded}")
    
    return signed_url

if __name__ == '__main__':
    secret_name = 'cloudfront-rsa-private-key'
    key_pair_id = 'APKAEXAMPLE'
    domain_name = 'https://example.cloudfront.net'
    url_path = '/path/to/your/object'
    
    # Retrieve private key from Secrets Manager
    private_key_pem = get_private_key_from_secrets_manager(secret_name)
    if private_key_pem:
        # Generate signed URL
        signed_url = generate_signed_url(domain_name, private_key_pem, key_pair_id, url_path)
        print(f"Signed URL: {signed_url}")
    else:
        print("Failed to retrieve private key from Secrets Manager.")

